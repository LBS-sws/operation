<?php

class TechnicianForm extends CFormModel
{
    public $id;
    public $order_user;
    //public $technician;
    public $status;
    public $remark;
    public $luu;
    public $lcu;
    public $statusList;
    public $order_code;
    public $goods_list;
    public $ject_remark;
    public $city;

    public $jd_set = array(
        "jd_order_type"=>0
    );
    public static $jd_set_list=array(
        array("field_id"=>"jd_order_type","field_type"=>"list","field_name"=>"jd order type","display"=>"none"),
    );

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->status = "pending";
/*        $this->goods_list = array(
            array(
                "id"=>"",
                "goods_id"=>"",
                "goods_code"=>"",
                "name"=>"",
                "type"=>"",
                "unit"=>"",
                "price"=>"",
                "goods_num"=>"",
                "note"=>"",
                "remark"=>"",
                "classify_id"=>"",
            )
        );*/
    }

    public function attributeLabels()
    {
        return array(
            'order_code'=>Yii::t('procurement','Order Code'),
            'order_class'=>Yii::t('procurement','Order Class'),
            'activity_id'=>Yii::t('procurement','Order of Activity'),
            'goods_list'=>Yii::t('procurement','Goods List'),
            'order_user'=>Yii::t('procurement','Order User'),
            //'technician'=>Yii::t('procurement','Technician'),
            'status'=>Yii::t('procurement','Order Status'),
            'remark'=>Yii::t('procurement','Remark'),
            'ject_remark'=>Yii::t('procurement','reject remark'),
        );
    }

    /**
     * Declares the validation rules.
     */
    public function rules()
    {
        return array(
            array('id,jd_set, order_code, order_user, order_class, technician, status, remark, luu, lcu, lud, lcd, goods_list,city','safe'),
            array('goods_list','required'),
            array('city','validateCity'),
            array('goods_list','validateGoods'),
            array('remark','validateActivity','on'=>'audit'),
            //array('order_num','numerical','allowEmpty'=>true,'integerOnly'=>true),
            //array('order_num','in','range'=>range(0,600)),
        );
    }

    //驗證訂單內的物品
    public function validateGoods($attribute, $params){
        $goods_list = $this->goods_list;
        if(count($this->goods_list)<1){
            $message = Yii::t('procurement','Fill in at least one goods');
            $this->addError($attribute,$message);
            return false;
        }
        $searchData=array(
            "org_number"=>CurlForDelivery::getJDCityCodeForCity($this->city),
        );
        $jd_goods_list = CurlForDelivery::getWarehouseGoodsStoreForJD(array("data"=>$searchData));
        if(empty($jd_goods_list)){
            $message = "金蝶物料为空，请与管理员联系。({$this->city})";
            $this->addError($attribute,$message);
            return false;
        }
        foreach ($goods_list as $key =>$goods){
            $goods_num = trim($goods["goods_num"]);
            if(empty($goods["goods_id"]) && empty($goods["goods_num"])){
                unset($this->goods_list[$key]);
                continue;
            }else if (empty($goods["goods_id"]) || empty($goods["goods_num"])){
                $message = Yii::t('procurement','The goods or quantity cannot be empty');
                $this->addError($attribute,$message);
                return false;
            }else if(!is_numeric($goods["goods_id"])|| floor($goods["goods_id"])!=$goods["goods_id"]){
                $message = Yii::t('procurement','goods does not exist');
                $this->addError($attribute,$message);
                return false;
            }else if(!is_numeric($goods["goods_num"])||$goods["goods_num"]<=0){
                $message = Yii::t('procurement','Goods Number can only be numbered');
                $this->addError($attribute,$message);
                return false;
            }else{
                $goods["goods_num"] = $goods_num;
                $this->goods_list[$key]["goods_num"] = $goods_num;
				$list = Yii::app()->db->createCommand()->select("*")
				->from("opr_warehouse")
				->where('id = :id and (city=:city or local_bool=0)',array(':id'=>$goods["goods_id"],':city'=>$this->city))
				->queryRow();
                //$list = WarehouseForm::getGoodsToGoodsId($goods["goods_id"]);
                if (empty($list)){
                    $message = Yii::t('procurement','Not Font Goods').$goods["goods_id"];
                    $this->addError($attribute,$message);
                    return false;
                }elseif ($list["decimal_num"] != "是"&& floor($goods["goods_num"])!=$goods["goods_num"]){
                    $message = $list["name"]."：".Yii::t('procurement','Goods can only be positive integers');
                    $this->addError($attribute,$message);
                    return false;
                }else{
                    if(key_exists($list["goods_code"],$jd_goods_list)){
                        if($jd_goods_list[$list["goods_code"]]["jd_store_sum"]<$goods_num){
                            $message = $list["name"]."：金蝶系统库存不足(".$jd_goods_list[$list["goods_code"]]["jd_store_sum"].")";
                            $this->addError($attribute,$message);
                            return false;
                        }
                    }else{
                        $message = $list["name"]."：金蝶系统没有找到该物品(".$list["goods_code"].")";
                        $this->addError($attribute,$message);
                        return false;
                    }
                }
            }

        }
        if(count($this->goods_list)<1){
            $message = Yii::t('procurement','Fill in at least one goods');
            $this->addError($attribute,$message);
        }
    }

    public function validateCity($attribute, $params){
        $city = Yii::app()->user->city();
        $city_allow = Yii::app()->user->city_allow();
		if(empty($this->city)){
			$this->city=$city;
		}else{
			if (strpos("'{$city_allow}'","'{$this->city}'")===false){
				$this->city=$city;
                $message = "城市异常，请刷新重试";
                $this->addError($attribute, $message);
                return false;
			}
		}
    }

    public function validateActivity($attribute, $params){
        $userName = Yii::app()->user->name;
        if ($this->scenario == "audit") {
            $rows = Yii::app()->db->createCommand()->select("count(id)")
                ->from("opr_order")->where("judge=0 and status = 'approve' and lcu=:lcu",
                    array( ":lcu" => $userName))->queryScalar();
            if ($rows > 0) {
                $message = "您有订单没有收货，请收货后继续操作。";
                $this->addError($attribute, $message);
                return false;
            }
        }
    }


    public function retrieveData($index) {
        $city_allow = Yii::app()->user->city_allow();
        $uid = Yii::app()->user->id;
        $rows = Yii::app()->db->createCommand()->select("*")
            ->from("opr_order")->where("id=:id and judge=0 and lcu=:lcu",
                array(":id"=>$index,":lcu"=>$uid))->queryAll();
        if (count($rows) > 0) {
            foreach ($rows as $row) {
                $this->id = $row['id'];
                $this->city = $row['city'];
                $this->order_code = $row['order_code'];
                $this->goods_list = WarehouseForm::getGoodsListToId($row['id']);
                $this->order_user = $row['order_user'];
                //$this->technician = $row['technician'];
                $this->status = $row['status'];
                $this->remark = $row['remark'];
                $this->ject_remark = $row['ject_remark'];
                $this->statusList = OrderForm::getStatusListToId($row['id']);

                $setRows = Yii::app()->db->createCommand()->select("field_id,field_value")
                    ->from("opr_send_set_jd")->where("table_id=:table_id and set_type='technician'",array(":table_id"=>$index))->queryAll();
                $setList = array();
                foreach ($setRows as $setRow){
                    $setList[$setRow["field_id"]] = $setRow["field_value"];
                }
                $this->jd_set=array();
                foreach (self::$jd_set_list as $item){
                    $fieldValue = key_exists($item["field_id"],$setList)?$setList[$item["field_id"]]:null;
                    $this->jd_set[$item["field_id"]] = $fieldValue;
                }
                break;
            }
        }
        return true;
    }

    public function saveData()
    {
        $connection = Yii::app()->db;
        $transaction=$connection->beginTransaction();
        try {
            $this->saveGoods($connection);
            //保存金蝶要求的字段
            $this->saveJDSetInfo($connection);
            $transaction->commit();
        }
        catch(Exception $e) {
            $transaction->rollback();
            throw new CHttpException(404,'Cannot update. ('.$e->getMessage().')');
        }
    }
    //保存金蝶要求的字段
    protected function saveJDSetInfo(&$connection) {
        foreach (self::$jd_set_list as $list){
            $field_value = key_exists($list["field_id"],$this->jd_set)?$this->jd_set[$list["field_id"]]:null;
            $rs = Yii::app()->db->createCommand()->select("id,field_id")->from("opr_send_set_jd")
                ->where("set_type ='technician' and table_id=:table_id and field_id=:field_id",array(
                    ':field_id'=>$list["field_id"],':table_id'=>$this->id,
                ))->queryRow();
            if($rs){
                $connection->createCommand()->update('opr_send_set_jd',array(
                    "field_value"=>$field_value,
                ),"id=:id",array(':id'=>$rs["id"]));
            }else{
                $connection->createCommand()->insert('opr_send_set_jd',array(
                    "table_id"=>$this->id,
                    "set_type"=>'technician',
                    "field_id"=>$list["field_id"],
                    "field_value"=>$field_value,
                ));
            }
        }
    }

    protected function saveGoods(&$connection) {
        $oldOrderStatus = Yii::app()->db->createCommand()->select()->from("opr_order")
            ->where("id=:id",array(":id"=>$this->id))->queryAll();
        $sql = '';
        $goodsBool = true;
        $insetBool = false;
        switch ($this->scenario) {
            case 'delete':
                $sql = "delete from opr_order where id = :id and judge=0 and lcu=:lcu";
                $goodsBool = false;
                break;
            case 'new':
                $insetBool = true;
                $sql = "insert into opr_order(
							order_user, remark, status, lcu, lcd
						) values (
							:order_user,:remark, :status, :lcu, :lcd
						)";
                break;
            case 'edit':
                $sql = "update opr_order set
							remark = :remark,
							luu = :luu,
							lud = :lud
						where id = :id and judge=0
						";
                break;
            case 'audit':
                if(empty($this->id)){
                    $insetBool = true;
                    $sql = "insert into opr_order(
							order_user, remark, status, lcu, lcd
						) values (
							:order_user,:remark, :status, :lcu, :lcd
						)";
                }else{
                    $sql = "update opr_order set
							remark = :remark,
							luu = :luu,
							lcd = :lcd,
							lud = :lud,
							status = :status
						where id = :id and judge=0
						";
                }
                break;
            case 'finish':
                $sql = "update opr_order set
							remark = :remark,
							luu = :luu,
							lud = :lud,
							status = :status
						where id = :id and judge=0
						";
                $goodsBool = false;
                break;
            default:
                $goodsBool = false;
        }
        if (empty($sql)) return false;

        $city = Yii::app()->user->city();
        $uid = Yii::app()->user->id;
        $order_username = Yii::app()->user->name;
        $command=$connection->createCommand($sql);
        if (strpos($sql,':id')!==false)
            $command->bindParam(':id',$this->id,PDO::PARAM_INT);
        if (strpos($sql,':order_user')!==false)
            $command->bindParam(':order_user',$order_username,PDO::PARAM_STR);
        if (strpos($sql,':status')!==false){
            if($this->scenario == "new"){
                $this->status = "pending";
            }elseif ($this->scenario == "audit"){
                $this->status = "sent";
            }elseif ($this->scenario == "finish"){
                $this->status = "finished";
            }
            $command->bindParam(':status',$this->status,PDO::PARAM_STR);
        }

        if (strpos($sql,':remark')!==false)
            $command->bindParam(':remark',$this->remark,PDO::PARAM_STR);
        if (strpos($sql,':lud')!==false)
            $command->bindParam(':lud',date('Y-m-d H:i:s'),PDO::PARAM_STR);
        if (strpos($sql,':luu')!==false)
            $command->bindParam(':luu',$uid,PDO::PARAM_STR);
        if (strpos($sql,':lcu')!==false)
            $command->bindParam(':lcu',$uid,PDO::PARAM_STR);
        if (strpos($sql,':lcd')!==false)
            $command->bindParam(':lcd',date('Y-m-d H:i:s'),PDO::PARAM_STR);
        $command->execute();

        if ($insetBool){
            $this->id = Yii::app()->db->getLastInsertID();
            $this->scenario = "edit";
            $code = strval($this->id);
            $this->order_code = "";
            for($i = 0;$i < 5-strlen($code);$i++){
                $this->order_code.="0";
            }
            $this->order_code .= $code;
            Yii::app()->db->createCommand()->update('opr_order', array(
                'order_code'=>$this->order_code,
                'judge'=>0,
                'city'=>$this->city,
                'lcu_email'=>Yii::app()->user->email(),
            ), 'id=:id', array(':id'=>$this->id));
        }
        if ($this->scenario=='delete'){
            Yii::app()->db->createCommand()->delete('opr_order_status', 'order_id=:order_id', array(':order_id'=>$this->id));
            Yii::app()->db->createCommand()->delete('opr_order_goods', 'order_id=:order_id', array(':order_id'=>$this->id));
        }else{
            Yii::app()->db->createCommand()->insert('opr_order_status', array(
                'order_id'=>$this->id,
                'status'=>$this->status,
                'r_remark'=>$this->remark,
                'lcu'=>Yii::app()->user->user_display_name(),
                'time'=>date('Y-m-d H:i:s'),
            ));
        }


        if ($goodsBool){
            //先刪除訂單里的所有物品
            Yii::app()->db->createCommand()->delete('opr_order_goods', 'order_id=:order_id', array(':order_id'=>$this->id));
            //物品的添加
            foreach ($this->goods_list as $goods){
                //添加
                Yii::app()->db->createCommand()->insert('opr_order_goods', array(
                    'goods_id'=>$goods["goods_id"],
                    'order_id'=>$this->id,
                    'goods_num'=>$goods["goods_num"],
                    'note'=>$goods["note"],
                    'lcu'=>Yii::app()->user->user_display_name(),
                ));
            }
        }

        $this->updateGoodsStatus();
        //發送郵件
        OrderGoods::sendEmailTwo($oldOrderStatus,$this->status,$this->order_code);
        return true;
    }

    //修改訂單內物品的狀態
    protected function updateGoodsStatus(){
        Yii::app()->db->createCommand()->update('opr_order_goods', array(
            'order_status'=>$this->status,
        ), 'order_id=:order_id', array(':order_id'=>$this->id));
    }

    //判斷輸入框能否修改
    public function getInputBool(){
        if($this->scenario=='view'){
            return true;
        }
        if($this->status == "pending"||$this->status == "reject"){
            return false;
        }else{
            return true;
        }
    }
    //獲取物品列表(按分類生成二維數組）
    public static function getWarehouseGoodsListToCity($city){
        $arr = array();
        $arr["all"] = array("id"=>0,"name"=>Yii::t("procurement","All Goods Class"),"list"=>array());


        $goodRows = Yii::app()->db->createCommand()->select("*")->from("opr_warehouse")
            ->where("(city=:city or local_bool=0) and display=1",array(
                ":city"=>$city
            ))->queryAll();
        if($goodRows){
            foreach ($goodRows as $goodRow){
                if(!key_exists($goodRow["jd_classify_no"],$arr)){
                    $arr[$goodRow["jd_classify_no"]]=array("id"=>$goodRow["jd_classify_no"],"name"=>$goodRow["jd_classify_name"],"list"=>array());
                }
                $arr[$goodRow["jd_classify_no"]]["list"][]=$goodRow;
            }
        }
        return $arr;
	}
}
